{
  "lesson": {
    "name": "Creating a node.js Server",
    "summary": "In this lesson youâ€™ll learn how to make a server using bare node.js. With no frameworks, or third party help, this is a great place to start if youâ€™re new to servers.",
    "numberOfTasks": 8
  },
  "solution": {
    "solution": "const http = require(â€˜httpâ€™); const PORT = 3000; const server = http.createServer(function (req,res){}); server.listen(PORT, function (error) { if (error){console.log(error)} else {console.log()}})",
    "lessonId": 3
  },
  "tasks": [
    {
      "name": "require http",
      "step": 1,
      "explanation": "To get started, we need to require the http library. To do this, create a const variable called http and require the library.\n\nIn node.js, to require a library you just type the require keyword, followed by the name of the library as follows: (â€˜httpâ€™)",
      "lessonId": 3
    },
    {
      "name": "declare your port",
      "step": 2,
      "explanation": "Next, we need to declare a PORT variable that tells our server where to look. For this exercise we recommend using port 3000.",
      "lessonId": 3
    },
    {
      "name": "create your server",
      "step": 3,
      "explanation": "With that done, we can now create our server. To do this, weâ€™ll declare a const variable called â€˜serverâ€™ and make use of the createServer method thatâ€™s attached to the http library.\n\nTo use this method, set your const equal to â€˜http.createServer()â€™, and weâ€™ll handle the rest in the next task.",
      "lessonId": 3
    },
    {
      "name": "add arguments to your createServer function",
      "step": 4,
      "explanation": "The createServer method takes a single function as itâ€™s argument, which in turn takes both the request and response - shortened to req and res - parameters.\n\nWhat does this mean? Inside the createServer parenthesis, you need to add another function, with the function keyword and arguments of req and res.",
      "lessonId": 3
    },
    {
      "name": "tell your server to listen",
      "step": 5,
      "explanation": "Now we have the server, we need to tell it to listen out for information on a certain port - this is where our PORT variable comes in handy.\n\nTo get the server to work, we have to tell it to â€˜listenâ€™. This is actually easier than you think, type â€˜server.listen()â€™",
      "lessonId": 3
    },
    {
      "name": "add your port",
      "step": 6,
      "explanation": "Next, we need to tell our server where to listen - our PORT - and what to do - callback function.\n\nWithin your parenthesis, add the PORT variable as the first argument with a callback function as the second argument. This callback function needs to take â€˜errorâ€™ as its only argument, which will come in handy during the next step.",
      "lessonId": 3
    },
    {
      "name": "add error logic",
      "step": 7,
      "explanation": "Great, youâ€™re almost there! Now itâ€™s time to make this server useful. Use an if else statement to either console log the error, or console log a message of your choice - make it fun and add a rocket ðŸš€.\n\nWhy do we do this? By using console.log we can easily see if the server is behaving as expected, or use it to document any errors that arise.",
      "lessonId": 3
    },
    {
      "name": "Ready for liftoff? Click run and revel in your genius ðŸš€ðŸŽ‰",
      "step": 8,
      "explanation": "Ready for liftoff? Click run and revel in your genius ðŸš€ðŸŽ‰",
      "lessonId": 3
    }
  ],
  "hints": [
    {
      "title": "require http",
      "content": "The HTTP interfaces in Node.js are designed to support many features of the protocol and never buffer entire requests or responses, so you can see all the data being passed.",
      "taskId": 14
    },
    {
      "title": "declare your port",
      "content": "Ports can be a complicated business, so in terms of this tutorial itâ€™s best to think of them as a place for your server to look for data",
      "taskId": 15
    },
    {
      "title": "create your server",
      "content": "The createServer method is a method thatâ€™s built into the http library. What does this mean? It means we can access it, and httpâ€™s other methods, by using http as a keyword, followed by a â€˜.â€™ and the name of the method we want to access.",
      "taskId": 16
    },
    {
      "title": "add arguments to your createServer function",
      "content": "This is a callback function and is only called from within the outer function. This makes it useful for testing, but also ensuring it only gets called under certain conditions.\n\nIt should look like this: const server = http.createServer(function (req,res){})",
      "taskId": 17
    },
    {
      "title": "tell your server to listen",
      "content": "Telling your server to listen is an important step in setting up your server, as without it your server canâ€™t do anything!",
      "taskId": 18
    },
    {
      "title": "add your port",
      "content": "As you can see, storing your PORT number in a variable is really useful and means you can reference it in multiple places without having to type it all out again.\n\nRemember, callback functions are just normal functions. If youâ€™re stuck on this, go over your code and check out the createServer method we used earlier.",
      "taskId": 19
    },
    {
      "title": "add error logic",
      "content": "For this task youâ€™ll need to use your if else logic skills. To get you started, we suggest starting with:  if (errror) {console.log(err)} else {add your message here...}",
      "taskId": 20
    },
    {
      "title": "Ready for liftoff? Click run and revel in your genius ðŸš€ðŸŽ‰",
      "content": "What are you waiting for!? Hit run to see your server in action ðŸ˜Ž",
      "taskId": 21
    }
  ],
  "summaries": [
    {
      "title": "summary one",
      "content": "this is the first summary",
      "taskId": 1
    },
    {
      "title": "summary two",
      "content": "this is the second summary",
      "taskId": 1
    }
  ],
  "tests": [
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+\\w+",
      "message": "Error: Expected const declaration",
      "suggestion": "Make sure you use the keyword 'const' to declare your imports",
      "taskId": 14
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+[hH]ttp\\s*",
      "message": "Error: No const variable named 'http'",
      "suggestion": "It's convention to name your http import 'http'",
      "taskId": 14
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+[hH]ttp\\s*=\\s*require\\('http'\\)\\s*;?\\s*",
      "message": "Error: Expected http package to be imported",
      "suggestion": "Make sure you your http import looks like this: 'const http = require('http')",
      "taskId": 14
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(port|PORT)",
      "message": "Error: No const variable named PORT",
      "suggestion": "Have you named your const variable 'PORT'?",
      "taskId": 15
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(port|PORT)\\s*=\\s*300\\d",
      "message": "Error: Expected PORT to be initialised as 3000",
      "suggestion": "Have you correctly set your port to 3000?",
      "taskId": 15
    },

    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(server)",
      "message": "Error: No const variable named 'server'",
      "suggestion": "It's convention to name your consr 'server'",
      "taskId": 16
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(server)\\s*=\\s*[hH]ttp.createServer\\(\\s*\\)",
      "message": "Error: Expected server to be initialised as http.createServer function invocation",
      "suggestion": "Make sure you your server declaration looks like this: 'const server = http.createServer()'",
      "taskId": 16
    },

    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(server)\\s*=\\s*[hH]ttp.createServer\\(\\s*\\function\\s*\\(req,res){})",
      "message": "Error: Expected createServer to include empty callback function",
      "suggestion": "Make sure you your createServer declaration looks like this: 'const server = http.createServer(function(req,res){})'",
      "taskId": 17
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*server\\.listen\\(",
      "message": "Error: Expected invocation of server.listen",
      "suggestion": "Have you used the listen method?\n\nTry 'server.listen()'",
      "taskId": 18
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*server\\.listen\\(\\s*(port|PORT)\\s*\\)",
      "message": "Error: Expected first argument of server.listen to be 'PORT'",
      "suggestion": "have you listed your PORT variable as the first argument of server.listen?",
      "taskId": 19
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*server\\.listen\\((port|PORT)\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*(\\s*error)\\s*{\\s*console\\.log\\(.+\\)\\s*}\\s*else\\s*{\\s*console.log(\\[\\s\\S]*",
      "message": "Error: Expected second argument of server.listen to be a callback function that displays errors or your message",
      "suggestion": "Read the error message for a hint",
      "taskId": 20
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*server\\.listen\\((port|PORT)\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*(\\s*error)\\s*{\\s*console\\.log\\(.+\\)\\s*}\\s*else\\s*{\\s*console.log(\\[\\s\\S]*",
      "message": "Error: Expected server to run",
      "suggestion": "Hit run and watch it run",
      "taskId": 21
    }
  ]
}
