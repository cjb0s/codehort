{
  "lesson": {
    "name": "Creating a Koa Server From Scratch",
    "summary": "In this lesson, you’ll cover the basics of setting up a Koa server from scratch.\n\nFrom the same team that made Express, Koa aims to be a smaller, more expressive, and more robust foundation for web applications and APIs.",
    "numberOfTasks": 7
  },
  "solution": {
    "solution": "const Koa = require('koa'); const bodyParser = require('koa-bodyparser'); const app = new Koa(); const PORT = 3000; app.listen(PORT, () => { console.log(`Server running at http://localhost:${PORT}`); });",
    "lessonId": 2
  },
  "tasks": [
    {
      "name": "install koa",
      "step": 1,
      "explanation": "First things first, we need to install a couple of dependencies. Use your terminal to install koa",
      "lessonId": 2
    },
    {
      "name": "install koa-bodyparser",
      "step": 2,
      "explanation": "Good job! Now for the other dependancy. Install koa-bodyparser this time",
      "lessonId": 2
    },
    {
      "name": "import koa and koa-bodyparser",
      "step": 3,
      "explanation": "Now that you’ve installed your dependencies, you need to tell your file to use them. For this, you can go ahead and write…”const dependencyname = require(‘dependency’)”; \n\n Remember to do this for both dependencies",
      "lessonId": 2
    },
    {
      "name": "initialize a new instance of koa",
      "step": 4,
      "explanation": "Nice work! Now we need to declare a new constant called app and initialise it to an instance of Koa, in order to access some of its properties and methods later in the build.",
      "lessonId": 2
    },
    {
      "name": "choose a port",
      "step": 5,
      "explanation": "Great! Now it’s time to decide what port you’d like your server to run on - for this exercise we recommend you use port 3000. Create a new constant called PORT and set it equal to your chosen port.",
      "lessonId": 2
    },
    {
      "name": "use your bodyparser",
      "step": 6,
      "explanation": "Almost there! Before we can start our server we need to use the bodyparser we imported. BodyParser is a 'middleware' and has to be initialised before listening to your server.\n\nTo get it working we have to tell our app to ‘use’ it, to do this add ‘app.use(YOUR-DEPENDENCY());’ after your const variables.",
      "lessonId": 2
    },
    {
      "name": "listen to your port and add a link to localhost",
      "step": 7,
      "explanation": "Finally we need our app to ‘listen’ to our port and make sure it’s receiving the data it needs. To do this, you can use the following function:\n\napp.listen(WHERE ARE WE LISTENING?, () => {})\n\nInsert your port variable and add a fun console.log within the callback function to make sure it’s up and running - we love to see emojis 🐨🐨\n\nTo finally run your code, type 'node index.js' in your terminal and hit RUN.",
      "lessonId": 2
    }
  ],
  "hints": [
    {
      "title": "Install Koa",
      "content": "We use npm for our packages - write ‘npm install koa’ in your terminal and see what happens.",
      "taskId": 7
    },
    {
      "title": "Install Koa-BodyParser",
      "content": "koa-bodyparser parses the incoming requests and makes them readable for our server. Install koa-bodyparser the same way you installed koa.",
      "taskId": 8
    },
    {
      "title": "Import Koa and Koa-Bodyparser",
      "content": "Type this in your code editor:\n\nconst Koa = require('koa');",
      "taskId": 9
    },
    {
      "title": "Initialize a New Instance of Koa",
      "content": "Create a constant named 'app', then save an invocation of your Koa function to 'app'.\n\nLike this: 'const app = new Koa();'",
      "taskId": 10
    },
    {
      "title": "Choose a Port",
      "content": "Ports can be a complicated business, so in terms of this tutorial it’s best to think of them as a place for your server to look for data",
      "taskId": 11
    },
    {
      "title": "Use Your Bodyparser",
      "content": "Here is the code to use bodyParser:\n\napp.use(bodyParser());",
      "taskId": 12
    },
    {
      "title": "Listen to Your Port and Add a Link to Localhost",
      "content": "Finally we need our app to ‘listen’ to our port and make sure it’s receiving the data it needs. To do this, you can use the following function:\n\napp.listen(WHERE ARE WE LISTENING?, () => {})\n\nInsert your port variable and add a fun console.log within the callback function to make sure it’s up and running - we love to see emojis 🐨🐨",
      "taskId": 13
    }
  ],
  "summaries": [
    {
      "title": "summary one",
      "content": "this is the first summary",
      "taskId": 1
    },
    {
      "title": "summary two",
      "content": "this is the second summary",
      "taskId": 1
    }
  ],
  "tests": [
    {
      "install": true,
      "terminalRegex": "^\\s*npm\\s+(i|install)\\s+koa(\\s+--save)?\\s*$",
      "regex": ".?",
      "message": "Error: Expected koa package to be installed",
      "suggestion": "Install koa from npm by typing 'npm install koa' here in the terminal",
      "taskId": 7
    },

    {
      "install": true,
      "terminalRegex": "^\\s*npm\\s+(i|install)\\s+koa-bodyparser(\\s+--save)?\\s*$",
      "regex": ".?",
      "message": "Error: Expected koa-bodyparser package to be installed",
      "suggestion": "Install koa-bodyparser from npm by typing 'npm install koa-bodyparser' here in the terminal",
      "taskId": 8
    },

    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+\\w+",
      "message": "Error: Expected const declaration",
      "suggestion": "Make sure you use the keyword 'const' to declare your imports",
      "taskId": 9
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+[kK]oa\\s*",
      "message": "Error: No const variable named 'Koa'",
      "suggestion": "It's convention to name your koa import 'Koa'",
      "taskId": 9
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+[kK]oa\\s*=\\s*require\\('koa'\\)\\s*;?\\s*",
      "message": "Error: Expected koa package to be imported",
      "suggestion": "Make sure you your koa import looks like this: 'const Koa = require('koa')",
      "taskId": 9
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+body[pP]arser",
      "message": "Error: No const variable named 'bodyParser'",
      "suggestion": "It's convention to name your koa-bodyparser import 'bodyParser'",
      "taskId": 9
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+body[pP]arser\\s*=\\s*require\\('koa-bodyparser'\\)\\s*;?\\s*",
      "message": "Error: Expected koa-bodyparser package to be imported",
      "suggestion": "Make sure you your koa-bodyparser import looks like this: 'const bodyparser = require('koa-bodyparser')",
      "taskId": 9
    },

    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(app|server)",
      "message": "Error: No const variable named 'app' or 'server'",
      "suggestion": "It's convention to name your server 'app'",
      "taskId": 10
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(app|server)\\s*=\\s*new\\s+[kK]oa\\(\\s*\\)",
      "message": "Error: Expected app to be initialised as koa function invocation",
      "suggestion": "Make sure you your app declaration looks like this: 'const app = new Koa()'",
      "taskId": 10
    },

    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(port|PORT",
      "message": "Error: No const variable named PORT",
      "suggestion": "Have you named your const variable 'PORT'?",
      "taskId": 11
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*const\\s+(port|PORT)\\s*=\\s*300\\d",
      "message": "Error: Expected PORT to be initialised as 3000",
      "suggestion": "Have you correctly set your port to 3000?",
      "taskId": 11
    },

    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*app\\.use\\(",
      "message": "Error: Expected invocation of app.use",
      "suggestion": "Have you used your middleware?\n\nTry 'app.use(CALL YOUR BODYPARSER HERE)'",
      "taskId": 12
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*app\\.use\\(\\s*body[pP]arser\\(\\s*\\)\\s*\\)",
      "message": "Error: Expected first argument of app.use to be 'bodyParser'",
      "suggestion": "have you listed your bodyparser variable as the argument of app.use?",
      "taskId": 12
    },

    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*app\\.listen\\(",
      "message": "Error: Expected invocation of app.listen",
      "suggestion": "Is your server listening with 'app.listen()'?",
      "taskId": 13
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*app\\.listen\\(\\s*(port|PORT)\\s*\\)",
      "message": "Error: Expected first argument of app.listen to be 'PORT'",
      "suggestion": "have you listed your PORT variable as the first argument of app.listen?",
      "taskId": 13
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*app\\.listen\\((port|PORT)\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*console\\.log\\(.+\\)\\s*;?\\s*\\}\\s*\\)",
      "message": "Error: Expected second argument of app.listen to be a callback function with only a console log",
      "suggestion": "Read the error message for a hint",
      "taskId": 13
    },
    {
      "install": false,
      "terminalRegex": null,
      "regex": "\\s*app\\.listen\\((port|PORT)\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*console\\.log\\(.+http://localhost:\\$\\{\\s*(port|PORT)\\s*\\}.+\\)\\s*;?\\s*\\}\\s*\\)",
      "message": "Error: Expected reference to correct port",
      "suggestion": "make sure your console log includes 'http://localhost:${PORT}'",
      "taskId": 13
    }
  ]
}
